//----------------------------------*-C++-*-----------------------------------//
/*!
 * \file   config.h.in
 * \author Alex Long
 * \date   July 25 2016
 * \brief  Config file that CMake uses to generate config.h given available
 *  libraries
 * \note   Copyright (C) 2017 Los Alamos National Security, LLC.
 *         All rights reserved
 */
//----------------------------------------------------------------------------//

#ifndef config_h_
#define config_h_

#include <mpi.h>

#cmakedefine VIZ_LIBRARIES_FOUND
#cmakedefine METIS_FOUND
#cmakedefine caliper_FOUND
#cmakedefine MOONLIGHT_NODE
#cmakedefine SNOW_NODE
#cmakedefine TRINITITE_NODE
#cmakedefine TRINITY_NODE
#cmakedefine CCS_NODE

#cmakedefine USE_OPENMP
#cmakedefine USE_MEMORY_RECORD

// For faux multigroup array sizing
#cmakedefine BRANSON_N_GROUPS @BRANSON_N_GROUPS@

#cmakedefine ENABLE_VERBOSE_GPU_TRANSPORT @ENABLE_VERBOSE_GPU_TRANSPORT@
/*----------------------------------------------------------------------------*/
/* Mark functions for compilation on host and device */
#ifdef __NVCC__
#define USE_CUDA ON
#endif


#if defined __NVCC__ && defined USE_CUDA
#define HOST_AND_DEVICE_FUNCTION __host__ __device__
#define GPU_HOST_DEVICE __host__ __device__
#define GPU_DEVICE __device__
#define GPU_KERNEL __global__
#define CONSTANT __constant__
#else
#define HOST_AND_DEVICE_FUNCTION
#define GPU_HOST_DEVICE
#define GPU_DEVICE
#define GPU_KERNEL
#define CONSTANT constexpr
#endif

#ifdef USE_OPENMP
#include <omp.h>
#endif


#ifdef USE_MEMORY_RECORD
#include "memory_recorder.h"
#endif

#ifdef caliper_FOUND
#include <adiak.h>
#include <caliper/cali.h>
#endif

#ifdef USE_CUDA

#include <cuda.h>
#include <cuda_runtime.h>
#include <thrust/device_vector.h>
#include <thrust/execution_policy.h>
#include <thrust/sort.h>

template <class T>
GPU_HOST_DEVICE inline void accumulate(T &target, T const addend) {
  atomicAdd(&target, addend);
  return;
}

#else

//! Add addend to t, non-atomic version
template <class T> inline void accumulate(T &target, T const addend) {
  target += addend;
  return;
}
#endif // USE_CUDA

inline void Insist(const bool pass, const std::string &message) {
  if (!pass) {
    std::cout<<"Insist at "<< __FILE__ <<" "<<__LINE__<<" fails with: "<<message<<std::endl;
    MPI_Abort(MPI_COMM_WORLD, 1);
  }
}

#ifdef caliper_FOUND

void cali_init() { 
     MPI_Comm comm = MPI_COMM_WORLD;
     adiak_init(&comm);
     adiak_collect_all();
}

void wrapped_cali_mark_begin(const char *timer_name) {
    CALI_MARK_BEGIN(timer_name);
}
void wrapped_cali_mark_end(const char *timer_name) {
    CALI_MARK_END(timer_name);
}

#else
void cali_init() { 
  int rank;
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  if (rank == 0) {
    std::cout<<"Branson built without caliper"<<std::endl;
  }
}
// Rely upon compiler optimizing this inline function out 
inline void wrapped_cali_mark_begin(const char *timer_name) {
  return;
}
inline void wrapped_cali_mark_end(const char *timer_name) {
  return;
}

#endif


#endif // def config_h_
//----------------------------------------------------------------------------//
// end of config.h
//----------------------------------------------------------------------------//
